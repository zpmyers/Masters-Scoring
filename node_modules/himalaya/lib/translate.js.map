{"version":3,"sources":["translate.js"],"names":["voidTags","serializeAttr","attr","value","isXml","text","toString","quoteEscape","indexOf","quote","dasherize","str","trim","replace","toLowerCase","inlineStyle","style","Object","keys","reduce","css","key","slice","htmlDefaults","toHTML","tree","options","doctype","html","walk","node","type","tagName","attributes","content","tag","val","prop","join","autoClose","innerds","children","newline","jadeDefaults","indentation","isWhitespaceNode","toJade","multi","multilineText","filter","jade","depth","id","className","redundantDiv","length","attrs","props","map","lowTagName","doctypeShortcut","format","line","hasTab","indent","lead","lines","split","start","maxSharedIndent","num","Math","min","trimLeft","Infinity","module","exports","toPug"],"mappings":";;AAAA;;;;AACA;;;;AAKA;AACA,IAAMA,WAAW,CACf,UADe,EACH,MADG,EACK,MADL,EACa,IADb,EACmB,KADnB,EAC0B,SAD1B,EAEf,OAFe,EAEN,IAFM,EAEA,KAFA,EAEO,OAFP,EAEgB,QAFhB,EAE0B,MAF1B,EAGf,MAHe,EAGP,OAHO,EAGE,QAHF,EAGY,OAHZ,EAGqB,KAHrB,CAAjB;;AAMA,SAASC,aAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqCC,KAArC,EAA4C;AAC1C,MAAI,CAACA,KAAD,IAAUF,SAASC,KAAvB,EAA8B,OAAOD,IAAP;AAC9B,MAAMG,OAAOF,MAAMG,QAAN,EAAb;AACA,MAAMC,cAAcF,KAAKG,OAAL,CAAa,IAAb,MAAuB,CAAC,CAA5C;AACA,MAAMC,QAAQF,cAAc,GAAd,GAAoB,IAAlC;AACA,SAAOL,OAAO,GAAP,GAAaO,KAAb,GAAqBJ,IAArB,GAA4BI,KAAnC;AACD;;AAED;AACA,SAASC,SAAT,CAAoBC,GAApB,EAAyB;AACvB,SAAOA,IAAIC,IAAJ,GACJC,OADI,CACI,UADJ,EACgB,KADhB,EAEJA,OAFI,CAEI,UAFJ,EAEgB,GAFhB,EAGJC,WAHI,EAAP;AAID;;AAED,SAASC,WAAT,CAAsBC,KAAtB,EAA6B;AAC3B,SAAOC,OAAOC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,CAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7C,WAAUD,GAAV,UAAkBV,UAAUW,GAAV,CAAlB,UAAqCL,MAAMK,GAAN,CAArC;AACD,GAFM,EAEJ,EAFI,EAEAC,KAFA,CAEM,CAFN,CAAP;AAGD;;AAED,IAAMC,eAAe,EAArB;;AAEA,SAASC,MAAT,CAAiBC,IAAjB,EAA+C;AAAA,MAAxBC,OAAwB,uEAAdH,YAAc;AAAA,MACtCI,OADsC,GAC3BD,OAD2B,CACtCC,OADsC;;AAE7C,MAAMvB,QAAQuB,YAAY,KAA1B;AACA,MAAMC,OAAO,eAAKC,IAAL,CAAUJ,IAAV,EAAgB,UAACK,IAAD,EAAOD,IAAP,EAAgB;AAAA,QACpCE,IADoC,GACED,IADF,CACpCC,IADoC;AAAA,QAC9BC,OAD8B,GACEF,IADF,CAC9BE,OAD8B;AAAA,QACrBC,UADqB,GACEH,IADF,CACrBG,UADqB;AAAA,QACTC,OADS,GACEJ,IADF,CACTI,OADS;;AAE3C,QAAIH,SAAS,MAAb,EAAqB,OAAOG,OAAP;AACrB,QAAIH,SAAS,SAAb,EAAwB,gBAAcG,OAAd;AACxB,QAAIC,MAAM,MAAMH,OAAhB;AACA,SAAK,IAAM9B,IAAX,IAAmB+B,UAAnB,EAA+B;AAC7B,UAAMG,MAAMH,WAAW/B,IAAX,CAAZ;AACA,UAAIA,SAAS,SAAb,EAAwB;AACtB,aAAK,IAAMmC,IAAX,IAAmBD,GAAnB,EAAwB;AACtB,cAAMf,MAAM,UAAUX,UAAU2B,IAAV,CAAtB;AACAF,iBAAO,MAAMlC,cAAcoB,GAAd,EAAmBe,IAAIC,IAAJ,CAAnB,EAA8BjC,KAA9B,CAAb;AACD;AACD;AACD;;AAED,UAAIF,SAAS,OAAb,EAAsB;AACpBiC,eAAO,MAAMlC,cAAcC,IAAd,EAAoBa,YAAYqB,GAAZ,CAApB,CAAb;AACA;AACD;;AAED,UAAIlC,SAAS,WAAb,EAA0B;AACxBiC,eAAO,MAAMlC,cAAc,OAAd,EAAuBmC,IAAIE,IAAJ,CAAS,GAAT,CAAvB,CAAb;AACA;AACD;;AAEDH,aAAO,MAAMlC,cAAcS,UAAUR,IAAV,CAAd,EAA+BkC,GAA/B,EAAoChC,KAApC,CAAb;AACD;;AAED+B,WAAO,GAAP;AACA,QAAMI,YAAY,CAACnC,KAAD,IAAU,2BAAcJ,QAAd,EAAwBgC,QAAQlB,WAAR,EAAxB,CAA5B;AACA,QAAIyB,SAAJ,EAAe,OAAOJ,GAAP;;AAEf,QAAMK,UAAUX,KAAKC,KAAKW,QAAL,IAAiB,EAAtB,EAA0BH,IAA1B,CAA+B,EAA/B,CAAhB;AACA,WAAOH,MAAMK,OAAN,WAAqBR,OAArB,OAAP;AACD,GAlCY,CAAb;AAmCA,MAAIJ,KAAKU,IAAT,EAAe,OAAOV,KAAKU,IAAL,CAAU,EAAV,CAAP;AACf,SAAOV,IAAP;AACD;;AAED,IAAMc,UAAU,IAAhB;AACA,IAAMC,eAAe;AACnBC,eAAa;AADM,CAArB;;AAIA,SAASC,gBAAT,CAA2Bf,IAA3B,EAAiC;AAC/B,SAAO,EAAEA,KAAKC,IAAL,KAAc,MAAd,IAAwB,CAACD,KAAKI,OAAL,CAAatB,IAAb,EAA3B,CAAP;AACD;;AAED,SAASkC,MAAT,CAAiBrB,IAAjB,EAA+C;AAAA,MAAxBC,OAAwB,uEAAdiB,YAAc;AAAA,MACxChB,OADwC,GAC7BD,OAD6B,CACxCC,OADwC;;AAE7C,MAAMoB,QAAQC,cAActB,QAAQkB,WAAtB,CAAd;;AAEA,MAAInB,KAAKwB,MAAT,EAAiBxB,OAAOA,KAAKwB,MAAL,CAAYJ,gBAAZ,CAAP;AACjB,MAAMK,OAAO,eAAKrB,IAAL,CAAUJ,IAAV,EAAgB,UAACK,IAAD,EAAOD,IAAP,EAAasB,KAAb,EAAuB;AAAA,QAC3CpB,IAD2C,GACdD,IADc,CAC3CC,IAD2C;AAAA,QACrCC,OADqC,GACdF,IADc,CACrCE,OADqC;AAAA,QAC5BC,UAD4B,GACdH,IADc,CAC5BG,UAD4B;;AAElD,QAAIF,SAAS,MAAb,EAAqB;AACnB,aAAOgB,MAAMjB,KAAKI,OAAX,EAAoBiB,KAApB,EAA2B,IAA3B,CAAP;AACD;AACD,QAAIpB,SAAS,SAAb,EAAwB;AACtB,UAAM1B,OAAOyB,KAAKI,OAAlB;AACA,aAAO,CAAC7B,KAAKG,OAAL,CAAakC,OAAb,CAAD,GACHK,MAAM,IAAN,EAAYI,KAAZ,IAAqBT,OAArB,GAA+BK,MAAM1C,IAAN,EAAY8C,QAAQ,CAApB,CAD5B,GAEHJ,MAAM,OAAO1C,IAAb,EAAmB8C,KAAnB,CAFJ;AAGD;AACD,QAAIhB,MAAMH,OAAV;AAXkD,QAY3CoB,EAZ2C,GAY1BnB,UAZ0B,CAY3CmB,EAZ2C;AAAA,QAYvCC,SAZuC,GAY1BpB,UAZ0B,CAYvCoB,SAZuC;;AAalD,QAAID,EAAJ,EAAQjB,aAAWiB,EAAX;AACR,QAAIC,SAAJ,EAAelB,aAAWkB,UAAUf,IAAV,CAAe,GAAf,CAAX;;AAEf,QAAMgB,eAAexB,KAAKE,OAAL,KAAiB,KAAjB,IAA0BG,IAAIoB,MAAJ,GAAa,CAA5D;AACA,QAAID,YAAJ,EAAkBnB,MAAMA,IAAIb,KAAJ,CAAU,CAAV,CAAN;;AAElBa,UAAMY,MAAMZ,GAAN,EAAWgB,KAAX,CAAN;AACA,QAAMK,QAAQ1B,KAAKG,UAAnB;AACA,QAAMwB,QAAQxC,OAAOC,IAAP,CAAYsC,KAAZ,EAAmBP,MAAnB,CAA0B,eAAO;AAC7C,aAAO5B,QAAQ,WAAR,IAAuBA,QAAQ,IAAtC;AACD,KAFa,CAAd;AAGA,QAAIoC,MAAMF,MAAV,EAAkB;AAChB,UAAMnD,QAAQuB,YAAY,KAA1B;AACAQ,aAAO,GAAP;AACAA,aAAOsB,MAAMC,GAAN,CAAU,gBAAQ;AACvB,YAAMtB,MAAMoB,MAAMnB,IAAN,CAAZ;AACA,YAAIA,SAAS,SAAb,EAAwB;AACtB,iBAAOpB,OAAOC,IAAP,CAAYkB,GAAZ,EAAiBsB,GAAjB,CAAqB,gBAAQ;AAClC,mBAAOzD,cAAc,UAAUS,UAAUR,IAAV,CAAxB,EAAyCkC,IAAIlC,IAAJ,CAAzC,EAAoDE,KAApD,CAAP;AACD,WAFM,EAEJkC,IAFI,CAEC,IAFD,CAAP;AAGD;AACD,YAAID,SAAS,OAAb,EAAsB,OAAOpC,cAAcoC,IAAd,EAAoBtB,YAAYqB,GAAZ,CAApB,CAAP;AACtB,eAAOnC,cAAcS,UAAU2B,IAAV,CAAd,EAA+BD,GAA/B,EAAoChC,KAApC,CAAP;AACD,OATM,EASJkC,IATI,CASC,IATD,CAAP;AAUAH,aAAO,GAAP;AACD;AACD,QAAMwB,aAAa7B,KAAKE,OAAL,CAAalB,WAAb,EAAnB;AACA,QAAI,2BAAcd,QAAd,EAAwB2D,UAAxB,CAAJ,EAAyC;AACvC,UAAIA,eAAe,UAAnB,EAA+B;AAC7B,YAAI,CAAChC,OAAL,EAAcA,UAAUiC,gBAAgBzB,GAAhB,CAAV;AACd,eAAOY,MAAM,aAAapB,OAAnB,EAA4BwB,KAA5B,CAAP;AACD;AACD,aAAOhB,GAAP;AACD;;AA9CiD,QAgD3CM,QAhD2C,GAgD/BX,IAhD+B,CAgD3CW,QAhD2C;;AAiDlD,QAAI,CAACA,SAASc,MAAd,EAAsB,OAAOpB,GAAP;AACtB,QAAIM,SAASc,MAAT,KAAoB,CAApB,IAAyBd,SAAS,CAAT,EAAYV,IAAZ,KAAqB,MAAlD,EAA0D;AACxD,UAAM1B,QAAOoC,SAAS,CAAT,EAAYP,OAAzB;AACA,aAAO,CAAC7B,MAAKG,OAAL,CAAakC,OAAb,CAAD,GACHP,MAAM,GAAN,GAAYO,OAAZ,GAAsBK,MAAM1C,KAAN,EAAY8C,QAAQ,CAApB,CADnB,GAEHhB,MAAM,GAAN,GAAY9B,KAFhB;AAGD;;AAED,WAAO8B,MAAMO,OAAN,GACLb,KAAKY,SAASQ,MAAT,CAAgBJ,gBAAhB,CAAL,EAAwCM,QAAQ,CAAhD,EAAmDb,IAAnD,CAAwDI,OAAxD,CADF;AAED,GA3DY,EA2DV,CA3DU,CAAb;AA4DA,MAAIQ,KAAKZ,IAAT,EAAe,OAAOY,KAAKZ,IAAL,CAAUI,OAAV,CAAP;AACf,SAAOQ,IAAP;AACD;;AAED,SAASF,aAAT,CAAwBJ,WAAxB,EAAqC;AACnC,MAAIiB,SAAS;AAAA,WAAQC,IAAR;AAAA,GAAb;AACA,MAAMC,SAAS,4BAAenB,WAAf,EAA4B,IAA5B,CAAf;AACA,MAAImB,MAAJ,EAAY;AACVF,aAAS;AAAA,aAAQC,KAAKjD,OAAL,CAAa,KAAb,EAAoB+B,WAApB,CAAR;AAAA,KAAT;AACD;;AAED,WAASoB,MAAT,CAAiBb,KAAjB,EAAwBxC,GAAxB,EAA6B;AAC3B,WAAOwC,OAAP,EAAgB;AACdxC,YAAMiC,cAAcjC,GAApB;AACD;AACD,WAAOA,GAAP;AACD;;AAED,SAAO,UAAUA,GAAV,EAAewC,KAAf,EAAiC;AAAA,QAAXc,IAAW,uEAAJ,EAAI;;AACtC,QAAMC,QAAQvD,IACXwD,KADW,CACLzB,OADK,EAEXgB,GAFW,CAEPG,MAFO,EAGXZ,MAHW,CAGJ;AAAA,aAAQ,CAAC,CAACa,KAAKlD,IAAL,EAAV;AAAA,KAHI,CAAd;;AAKA,QAAMwD,QAAQC,gBAAgBH,KAAhB,CAAd;AACA,WAAOA,MACJR,GADI,CACA;AAAA,aAAQM,OAAOb,KAAP,EAAcc,OAAOH,KAAKxC,KAAL,CAAW8C,KAAX,CAArB,CAAR;AAAA,KADA,EAEJ9B,IAFI,CAECI,OAFD,CAAP;AAGD,GAVD;AAWD;;AAED,SAAS2B,eAAT,CAA0BH,KAA1B,EAAiC;AAC/B,SAAOA,MAAM/C,MAAN,CAAa,UAAUmD,GAAV,EAAeR,IAAf,EAAqB;AACvC,WAAOS,KAAKC,GAAL,CAASF,GAAT,EAAcR,KAAKP,MAAL,GAAcO,KAAKW,QAAL,GAAgBlB,MAA5C,CAAP;AACD,GAFM,EAEJmB,QAFI,CAAP;AAGD;;AAED;AACA,SAASd,eAAT,CAA0BjD,GAA1B,EAA+B;AAC7B,MAAI,4BAAeA,GAAf,EAAoB,cAApB,CAAJ,EAAyC,OAAO,cAAP;AACzC,MAAI,4BAAeA,GAAf,EAAoB,QAApB,CAAJ,EAAmC,OAAO,QAAP;AACnC,MAAI,4BAAeA,GAAf,EAAoB,UAApB,CAAJ,EAAqC,OAAO,UAAP;AACrC,MAAI,4BAAeA,GAAf,EAAoB,OAApB,CAAJ,EAAkC,OAAO,OAAP;AAClC,MAAI,4BAAeA,GAAf,EAAoB,KAApB,CAAJ,EAAgC,OAAO,KAAP;AAChC,MAAI,4BAAeA,GAAf,EAAoB,QAApB,CAAJ,EAAmC,OAAO,QAAP;AACnC,SAAO,MAAP;AACD;;AAEDgE,OAAOC,OAAP,GAAiB;AACfpD,gBADe;AAEfsB,gBAFe;AAGf+B,SAAO/B;AAHQ,CAAjB","file":"translate.js","sourcesContent":["import paul from 'paul'\nimport {\n  stringIncludes,\n  arrayIncludes\n} from './compat'\n\n// c/p'd from ../index.js\nconst voidTags = [\n  '!doctype', 'area', 'base', 'br', 'col', 'command',\n  'embed', 'hr', 'img', 'input', 'keygen', 'link',\n  'meta', 'param', 'source', 'track', 'wbr'\n]\n\nfunction serializeAttr (attr, value, isXml) {\n  if (!isXml && attr === value) return attr\n  const text = value.toString()\n  const quoteEscape = text.indexOf('\\'') !== -1\n  const quote = quoteEscape ? '\"' : '\\''\n  return attr + '=' + quote + text + quote\n}\n\n// stolen from underscore.string\nfunction dasherize (str) {\n  return str.trim()\n    .replace(/([A-Z])/g, '-$1')\n    .replace(/[-_\\s]+/g, '-')\n    .toLowerCase()\n}\n\nfunction inlineStyle (style) {\n  return Object.keys(style).reduce((css, key) => {\n    return `${css}; ${dasherize(key)}: ${style[key]}`\n  }, '').slice(2)\n}\n\nconst htmlDefaults = {}\n\nfunction toHTML (tree, options = htmlDefaults) {\n  const {doctype} = options\n  const isXml = doctype === 'xml'\n  const html = paul.walk(tree, (node, walk) => {\n    const {type, tagName, attributes, content} = node\n    if (type === 'Text') return content\n    if (type === 'Comment') return `<!--${content}-->`\n    let tag = '<' + tagName\n    for (const attr in attributes) {\n      const val = attributes[attr]\n      if (attr === 'dataset') {\n        for (const prop in val) {\n          const key = 'data-' + dasherize(prop)\n          tag += ' ' + serializeAttr(key, val[prop], isXml)\n        }\n        continue\n      }\n\n      if (attr === 'style') {\n        tag += ' ' + serializeAttr(attr, inlineStyle(val))\n        continue\n      }\n\n      if (attr === 'className') {\n        tag += ' ' + serializeAttr('class', val.join(' '))\n        continue\n      }\n\n      tag += ' ' + serializeAttr(dasherize(attr), val, isXml)\n    }\n\n    tag += '>'\n    const autoClose = !isXml && arrayIncludes(voidTags, tagName.toLowerCase())\n    if (autoClose) return tag\n\n    const innerds = walk(node.children || []).join('')\n    return tag + innerds + `</${tagName}>`\n  })\n  if (html.join) return html.join('')\n  return html\n}\n\nconst newline = '\\n'\nconst jadeDefaults = {\n  indentation: '  '\n}\n\nfunction isWhitespaceNode (node) {\n  return !(node.type === 'Text' && !node.content.trim())\n}\n\nfunction toJade (tree, options = jadeDefaults) {\n  let {doctype} = options\n  const multi = multilineText(options.indentation)\n\n  if (tree.filter) tree = tree.filter(isWhitespaceNode)\n  const jade = paul.walk(tree, (node, walk, depth) => {\n    const {type, tagName, attributes} = node\n    if (type === 'Text') {\n      return multi(node.content, depth, '| ')\n    }\n    if (type === 'Comment') {\n      const text = node.content\n      return ~text.indexOf(newline)\n        ? multi('//', depth) + newline + multi(text, depth + 1)\n        : multi('//' + text, depth)\n    }\n    let tag = tagName\n    const {id, className} = attributes\n    if (id) tag += `#${id}`\n    if (className) tag += `.${className.join('.')}`\n\n    const redundantDiv = node.tagName === 'div' && tag.length > 3\n    if (redundantDiv) tag = tag.slice(3)\n\n    tag = multi(tag, depth)\n    const attrs = node.attributes\n    const props = Object.keys(attrs).filter(key => {\n      return key !== 'className' && key !== 'id'\n    })\n    if (props.length) {\n      const isXml = doctype === 'xml'\n      tag += '('\n      tag += props.map(prop => {\n        const val = attrs[prop]\n        if (prop === 'dataset') {\n          return Object.keys(val).map(attr => {\n            return serializeAttr('data-' + dasherize(attr), val[attr], isXml)\n          }).join(', ')\n        }\n        if (prop === 'style') return serializeAttr(prop, inlineStyle(val))\n        return serializeAttr(dasherize(prop), val, isXml)\n      }).join(', ')\n      tag += ')'\n    }\n    const lowTagName = node.tagName.toLowerCase()\n    if (arrayIncludes(voidTags, lowTagName)) {\n      if (lowTagName === '!doctype') {\n        if (!doctype) doctype = doctypeShortcut(tag)\n        return multi('doctype ' + doctype, depth)\n      }\n      return tag\n    }\n\n    const {children} = node\n    if (!children.length) return tag\n    if (children.length === 1 && children[0].type === 'Text') {\n      const text = children[0].content\n      return ~text.indexOf(newline)\n        ? tag + '.' + newline + multi(text, depth + 1)\n        : tag + ' ' + text\n    }\n\n    return tag + newline +\n      walk(children.filter(isWhitespaceNode), depth + 1).join(newline)\n  }, 0)\n  if (jade.join) return jade.join(newline)\n  return jade\n}\n\nfunction multilineText (indentation) {\n  let format = line => line\n  const hasTab = stringIncludes(indentation, '\\t')\n  if (hasTab) {\n    format = line => line.replace(/\\t/g, indentation)\n  }\n\n  function indent (depth, str) {\n    while (depth--) {\n      str = indentation + str\n    }\n    return str\n  }\n\n  return function (str, depth, lead = '') {\n    const lines = str\n      .split(newline)\n      .map(format)\n      .filter(line => !!line.trim())\n\n    const start = maxSharedIndent(lines)\n    return lines\n      .map(line => indent(depth, lead + line.slice(start)))\n      .join(newline)\n  }\n}\n\nfunction maxSharedIndent (lines) {\n  return lines.reduce(function (num, line) {\n    return Math.min(num, line.length - line.trimLeft().length)\n  }, Infinity)\n}\n\n// see http://jade-lang.com/reference/doctype/\nfunction doctypeShortcut (str) {\n  if (stringIncludes(str, 'Transitional')) return 'transitional'\n  if (stringIncludes(str, 'strict')) return 'strict'\n  if (stringIncludes(str, 'Frameset')) return 'frameset'\n  if (stringIncludes(str, 'Basic')) return 'basic'\n  if (stringIncludes(str, '1.1')) return '1.1'\n  if (stringIncludes(str, 'Mobile')) return 'mobile'\n  return 'html'\n}\n\nmodule.exports = {\n  toHTML,\n  toJade,\n  toPug: toJade\n}\n"]}